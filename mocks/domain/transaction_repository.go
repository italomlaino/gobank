// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/italomlaino/gobank/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: accountID, operationTypeID, amount, eventData
func (_m *TransactionRepository) Create(accountID int64, operationTypeID domain.OperationTypeID, amount int64, eventData time.Time) (*domain.Transaction, error) {
	ret := _m.Called(accountID, operationTypeID, amount, eventData)

	var r0 *domain.Transaction
	if rf, ok := ret.Get(0).(func(int64, domain.OperationTypeID, int64, time.Time) *domain.Transaction); ok {
		r0 = rf(accountID, operationTypeID, amount, eventData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, domain.OperationTypeID, int64, time.Time) error); ok {
		r1 = rf(accountID, operationTypeID, amount, eventData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByAccountID provides a mock function with given fields: accountID
func (_m *TransactionRepository) FetchByAccountID(accountID int64) (*[]domain.Transaction, error) {
	ret := _m.Called(accountID)

	var r0 *[]domain.Transaction
	if rf, ok := ret.Get(0).(func(int64) *[]domain.Transaction); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
