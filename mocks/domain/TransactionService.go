// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/italomlaino/gobank/domain"
	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: accountID, operationTypeID, amount
func (_m *TransactionService) Create(accountID int64, operationTypeID domain.OperationType, amount int64) (*domain.Transaction, error) {
	ret := _m.Called(accountID, operationTypeID, amount)

	var r0 *domain.Transaction
	if rf, ok := ret.Get(0).(func(int64, domain.OperationType, int64) *domain.Transaction); ok {
		r0 = rf(accountID, operationTypeID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, domain.OperationType, int64) error); ok {
		r1 = rf(accountID, operationTypeID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAll provides a mock function with given fields:
func (_m *TransactionService) FetchAll() (*[]domain.Transaction, error) {
	ret := _m.Called()

	var r0 *[]domain.Transaction
	if rf, ok := ret.Get(0).(func() *[]domain.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
